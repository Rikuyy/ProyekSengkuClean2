 /*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package project;

import Custom.Barcode;
import Custom.Connector;
import Custom.Connector2;
import Custom.Connector3;
import Custom.ConnectorH;
import Custom.FormatUang;
import Custom.NoteLength;
import com.formdev.flatlaf.FlatLightLaf;
import com.formdev.flatlaf.extras.FlatSVGIcon;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.File;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.text.NumberFormat;
import java.text.ParseException;
import java.util.Locale;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.text.AbstractDocument;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DocumentFilter;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author OZ
 */
public final class AddOrder extends javax.swing.JDialog {
private OrderListener orderListener;
    /**
     * Creates new form DAddOrder
     */
    public interface OrderListener {
        void onOrderSaved();
    }
    public void setOrderListener(OrderListener listener) {
        this.orderListener = listener;
    }
    public AddOrder(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        applyCharacterLimit();
        setLocationRelativeTo(parent);
        Tf_Total.setEditable(false);
        Tf_Kembali.setEditable(false); 
        Tf_Total.setText("Rp 0,00");
        Tf_Kembali.setText("Rp 0,00");
        Tf_Bayar.setText("");
        ComboPelanggan(Jc_Nama);
        ComboKaryawan(Jc_Karyawan);
        ComboLayanan(Jc_Layanan);
        setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
    @Override
        public void windowClosing(java.awt.event.WindowEvent e) {
        Bt_BatalActionPerformed(null);
    }
});
        Tf_Bayar.addKeyListener(new KeyAdapter() {
    @Override
    public void keyPressed(KeyEvent e) {
        if (e.getKeyCode() == KeyEvent.VK_ENTER) {
            formatBayarDanHitungKembalian();
        }
    }
});
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        Lb_Nama = new javax.swing.JLabel();
        Lb_Merk = new javax.swing.JLabel();
        Lb_Layanan = new javax.swing.JLabel();
        Bt_Simpan = new javax.swing.JButton();
        Bt_Batal = new javax.swing.JButton();
        Jc_Layanan = new javax.swing.JComboBox<>();
        Lb_Karyawan = new javax.swing.JLabel();
        Jc_Merk = new javax.swing.JComboBox<>();
        Jc_Karyawan = new javax.swing.JComboBox<>();
        Lb_Catatan = new javax.swing.JLabel();
        Lb_Total = new javax.swing.JLabel();
        Tf_Total = new javax.swing.JTextField();
        Jc_Nama = new javax.swing.JComboBox<>();
        Tf_Bayar = new javax.swing.JTextField();
        Lb_Bayar = new javax.swing.JLabel();
        Tf_Kembali = new javax.swing.JTextField();
        Lb_Kembali = new javax.swing.JLabel();
        Lb_Estimasi = new javax.swing.JLabel();
        Tf_Estimasi = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Tf_Catatan = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        Lb_Nama.setText("Nama");

        Lb_Merk.setText("Merk Barang");

        Lb_Layanan.setText("Layanan");

        Bt_Simpan.setBackground(new java.awt.Color(51, 51, 255));
        Bt_Simpan.setForeground(new java.awt.Color(255, 255, 255));
        Bt_Simpan.setText("Simpan");
        Bt_Simpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bt_SimpanActionPerformed(evt);
            }
        });

        Bt_Batal.setBackground(new java.awt.Color(204, 0, 0));
        Bt_Batal.setForeground(new java.awt.Color(255, 255, 255));
        Bt_Batal.setText("Batal");
        Bt_Batal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bt_BatalActionPerformed(evt);
            }
        });

        Jc_Layanan.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pilih Layanan" }));
        Jc_Layanan.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Jc_LayananMouseClicked(evt);
            }
        });
        Jc_Layanan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Jc_LayananActionPerformed(evt);
            }
        });

        Lb_Karyawan.setText("Karyawan");

        Jc_Merk.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "List Barang" }));

        Jc_Karyawan.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pilih Karyawan" }));
        Jc_Karyawan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Jc_KaryawanActionPerformed(evt);
            }
        });

        Lb_Catatan.setText("Catatan ");

        Lb_Total.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        Lb_Total.setText("Total");

        Tf_Total.setBackground(new java.awt.Color(233, 231, 231));
        Tf_Total.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        Tf_Total.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Tf_TotalActionPerformed(evt);
            }
        });

        Jc_Nama.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pilih Pelanggan" }));
        Jc_Nama.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Jc_NamaMouseClicked(evt);
            }
        });
        Jc_Nama.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Jc_NamaActionPerformed(evt);
            }
        });

        Tf_Bayar.setBackground(new java.awt.Color(233, 231, 231));
        Tf_Bayar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Tf_BayarActionPerformed(evt);
            }
        });

        Lb_Bayar.setText("Bayar");

        Tf_Kembali.setBackground(new java.awt.Color(233, 231, 231));
        Tf_Kembali.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Tf_KembaliActionPerformed(evt);
            }
        });

        Lb_Kembali.setText("Kembali");

        Lb_Estimasi.setText("Estimasi");

        Tf_Estimasi.setBackground(new java.awt.Color(233, 231, 231));
        Tf_Estimasi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Tf_EstimasiActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Century751 No2 BT", 1, 18)); // NOI18N
        jLabel2.setText("Tambah Pesanan");

        Tf_Catatan.setColumns(20);
        Tf_Catatan.setLineWrap(true);
        Tf_Catatan.setRows(5);
        Tf_Catatan.setWrapStyleWord(true);
        jScrollPane1.setViewportView(Tf_Catatan);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(Bt_Simpan)
                                .addGap(18, 18, 18)
                                .addComponent(Bt_Batal, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(Lb_Merk, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Lb_Layanan, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Jc_Layanan, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(Lb_Karyawan, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Jc_Merk, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(Jc_Karyawan, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(Jc_Nama, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(Lb_Nama, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(Lb_Estimasi, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(188, 188, 188))
                                    .addComponent(Tf_Estimasi, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(47, 47, 47)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jScrollPane1)
                                    .addComponent(Tf_Bayar, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE)
                                    .addComponent(Lb_Bayar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Tf_Kembali, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE)
                                    .addComponent(Lb_Total, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Lb_Kembali, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Tf_Total, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE)
                                    .addComponent(Lb_Catatan, javax.swing.GroupLayout.Alignment.LEADING))))
                        .addGap(56, 56, 56))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(Lb_Nama)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Jc_Nama, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(Lb_Merk)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Jc_Merk, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Lb_Layanan)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Jc_Layanan, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Lb_Karyawan)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Jc_Karyawan, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Lb_Estimasi)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Tf_Estimasi, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(Lb_Total, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Tf_Total, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(Lb_Bayar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Tf_Bayar, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(63, 63, 63))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(Lb_Kembali)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Tf_Kembali, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Lb_Catatan)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1)))
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Bt_Simpan)
                    .addComponent(Bt_Batal))
                .addGap(18, 18, 18))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Bt_SimpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Bt_SimpanActionPerformed
        SaveData();
        if (orderListener != null) {
            orderListener.onOrderSaved();
        }
        this.dispose();
    }//GEN-LAST:event_Bt_SimpanActionPerformed

    private void Jc_LayananMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Jc_LayananMouseClicked

    }//GEN-LAST:event_Jc_LayananMouseClicked

    private void Jc_LayananActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Jc_LayananActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Jc_LayananActionPerformed

    private void Jc_KaryawanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Jc_KaryawanActionPerformed

    }//GEN-LAST:event_Jc_KaryawanActionPerformed

    private void Tf_TotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Tf_TotalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Tf_TotalActionPerformed

    private void Jc_NamaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Jc_NamaMouseClicked

    }//GEN-LAST:event_Jc_NamaMouseClicked

    private void Jc_NamaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Jc_NamaActionPerformed
        String selectedPelanggan = (String) Jc_Nama.getSelectedItem();
        if (selectedPelanggan != null && !selectedPelanggan.startsWith("--")) {
            ComboMerk(Jc_Merk);
        } else {

            DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
            model.addElement("--Pilih Merk Barang--");
            Jc_Merk.setModel(model);
        }
    }//GEN-LAST:event_Jc_NamaActionPerformed

    private void Bt_BatalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Bt_BatalActionPerformed
         MainAdd mainAdd = MainAdd.getInstance();
    if (mainAdd != null) {
        mainAdd.setVisible(true);
    }
    this.dispose();
    }//GEN-LAST:event_Bt_BatalActionPerformed

    private void Tf_BayarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Tf_BayarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Tf_BayarActionPerformed

    private void Tf_KembaliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Tf_KembaliActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Tf_KembaliActionPerformed

    private void Tf_EstimasiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Tf_EstimasiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Tf_EstimasiActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        FlatLightLaf.setup();
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AddOrder dialog = new AddOrder(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Bt_Batal;
    private javax.swing.JButton Bt_Simpan;
    private javax.swing.JComboBox<String> Jc_Karyawan;
    private javax.swing.JComboBox<String> Jc_Layanan;
    private javax.swing.JComboBox<String> Jc_Merk;
    private javax.swing.JComboBox<String> Jc_Nama;
    private javax.swing.JLabel Lb_Bayar;
    private javax.swing.JLabel Lb_Catatan;
    private javax.swing.JLabel Lb_Estimasi;
    private javax.swing.JLabel Lb_Karyawan;
    private javax.swing.JLabel Lb_Kembali;
    private javax.swing.JLabel Lb_Layanan;
    private javax.swing.JLabel Lb_Merk;
    private javax.swing.JLabel Lb_Nama;
    private javax.swing.JLabel Lb_Total;
    private javax.swing.JTextField Tf_Bayar;
    private javax.swing.JTextArea Tf_Catatan;
    private javax.swing.JTextField Tf_Estimasi;
    private javax.swing.JTextField Tf_Kembali;
    private javax.swing.JTextField Tf_Total;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
private void applyCharacterLimit() {
    ((AbstractDocument)Tf_Catatan.getDocument())
        .setDocumentFilter(new NoteLength(300));
    addCharacterCounter();
}
private void addCharacterCounter() {
    JLabel counterLabel = new JLabel("0/300");
    counterLabel.setFont(new Font("Tahoma", Font.PLAIN, 10));
    
    
    Tf_Catatan.getDocument().addDocumentListener(new DocumentListener() {
        public void update() {
            int count = Tf_Catatan.getText().length();
            counterLabel.setText(count + "/300");
            counterLabel.setForeground(count >= 300 ? Color.RED : Color.GRAY);
        }
        @Override public void insertUpdate(DocumentEvent e) { update(); }
        @Override public void removeUpdate(DocumentEvent e) { update(); }
        @Override public void changedUpdate(DocumentEvent e) { update(); }
    });
    
    getContentPane().add(counterLabel, BorderLayout.SOUTH);
}
    public int PilihId(JComboBox<String> comboBox){
    String selected = (String) comboBox.getSelectedItem();
    Map<String, Integer> map = (Map<String, Integer>) comboBox.getClientProperty("MapId");
    if (map != null && selected != null && map.containsKey(selected)) {
        return map.get(selected);
    }
    return -1;
}
    public void ComboPelanggan(JComboBox<String> comboBox){
    DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
    Map<String, Integer> MapId = new HashMap<>();
    
    
    String sql = "SELECT id_pelanggan, nama FROM pelanggan";
    
    try (Connection conn = ConnectorH.getConnection();
        PreparedStatement pst = conn.prepareStatement(sql);
        ResultSet rs = pst.executeQuery()) {
        model.addElement("--Pilih Pelanggan--");
        while (rs.next()) {
            int Id= rs.getInt("id_pelanggan");
            String Nama = rs.getString("nama");
            model.addElement(Nama);
            MapId.put(Nama, Id);
        }
        
        
        
        comboBox.setModel(model);
        comboBox.putClientProperty("MapId", MapId);
        
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Gagal memuat data pelanggan: " + e.getMessage());
    } 
}
public void ComboMerk(JComboBox<String> Jc_Merk){
    
    DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
    Map<String, Integer> MapId = new HashMap<>();
    
    String selectedPelanggan = (String) Jc_Nama.getSelectedItem();
    int idPelanggan = PilihId(Jc_Nama);
    
    if (idPelanggan == -1) {
        model.addElement("--Pilih Merk Barang--");
        Jc_Merk.setModel(model);
        return;
    }
    
    String sql = "SELECT id_barang, CONCAT(merk,'(',jenis_barang,')') AS merk FROM barang WHERE id_pelanggan = ?";
    try ( Connection conn = ConnectorH.getConnection();
         PreparedStatement pst = conn.prepareStatement(sql)){
        pst.setInt(1, idPelanggan);
        ResultSet rs = pst.executeQuery();
        model.addElement("--Pilih Merk Barang--");
        while (rs.next()) {
            int id = rs.getInt("id_barang");
            String merk = rs.getString("merk");
            model.addElement(merk);
            MapId.put(merk, id);
        }
        Jc_Merk.setModel(model);
        Jc_Merk.putClientProperty("MapId", MapId);
} catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Gagal memuat data barang: " + e.getMessage());
    } 
}
public void ComboKaryawan(JComboBox<String> comboBox){
    DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
    Map<String, Integer> MapId = new HashMap<>();

    String sql = "SELECT id_karyawan, nama FROM karyawan";

    try (Connection conn = ConnectorH.getConnection();
         PreparedStatement pst = conn.prepareStatement(sql);
         ResultSet rs = pst.executeQuery()) {
        model.addElement("--Pilih Karyawan--");
        while (rs.next()) {
            int id = rs.getInt("id_karyawan");
            String nama = rs.getString("nama");
            model.addElement(nama);
            MapId.put(nama, id);
        }
        comboBox.setModel(model);
        comboBox.putClientProperty("MapId", MapId);
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Gagal memuat data karyawan: " + e.getMessage());
    }
}

public void ComboLayanan(JComboBox<String> comboBox) {
    DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
    Map<String, Integer> mapId = new HashMap<>();
    Map<String, Double> mapHarga = new HashMap<>();
    Map<String, Boolean> mapHargaNull = new HashMap<>();
    String sql = "SELECT id_layanan, jenis_layanan, harga FROM layanan";

    try (Connection conn = ConnectorH.getConnection();
         PreparedStatement pst = conn.prepareStatement(sql);
         ResultSet rs = pst.executeQuery()) {
        
        model.addElement("--Pilih Layanan--");
        while (rs.next()) {
            int id = rs.getInt("id_layanan");
            String jenis = rs.getString("jenis_layanan");
            double harga = rs.getDouble("harga");
            boolean isNull = rs.getObject("harga") == null;
            if (!isNull) {
                harga = rs.getDouble("harga");
            }
            model.addElement(jenis);
            mapId.put(jenis, id);
            mapHarga.put(jenis, harga);
            mapHargaNull.put(jenis, isNull);
            
        }
        
        comboBox.setModel(model);
        comboBox.putClientProperty("MapId", mapId);
        comboBox.putClientProperty("MapHarga", mapHarga);
        comboBox.putClientProperty("MapHargaNull", mapHargaNull);
        
       comboBox.addActionListener(e -> {
            String selected = (String) comboBox.getSelectedItem();
            if (selected != null && !selected.equals("--Pilih Layanan--")) {
                boolean isNull = mapHargaNull.get(selected);
                
                if (isNull) {
                    String input = JOptionPane.showInputDialog(
                        null, 
                        "Harga untuk layanan " + selected + " belum ditentukan.\nMasukkan harga:", 
                        "Input Harga", 
                        JOptionPane.QUESTION_MESSAGE
                    );
                    
                    try {
                        if (input != null) { // Jika user tidak membatalkan
                            double hargaManual = Double.parseDouble(input.replaceAll("[^\\d]", ""));
                            mapHarga.put(selected, hargaManual);
                            mapHargaNull.put(selected, false);
                            Tf_Total.setText(formatRupiah(hargaManual));
                        } else {
                            Tf_Total.setText("Rp. 0,00");
                        }
                    } catch (NumberFormatException ex) {
                        JOptionPane.showMessageDialog(null, "Format harga tidak valid!");
                        Tf_Total.setText("Rp. 0,00");
                    }
                } else {
                    Tf_Total.setText(formatRupiah(mapHarga.get(selected)));
                }
            } else {
                Tf_Total.setText("Rp. 0,00");
            }
        });
        
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Gagal memuat data layanan: " + e.getMessage());
    }
}
public void setSelectedServiceIndex(int index) {
    if (index >= 0 && index < Jc_Layanan.getItemCount()) {
        Jc_Layanan.setSelectedIndex(index);
        Jc_LayananActionPerformed(null) ;
    }
}
private void formatBayarDanHitungKembalian() {
    try {
        double total = parseRupiahToDouble(Tf_Total.getText().trim());
        String inputBayar = Tf_Bayar.getText().trim();
        if (inputBayar.isEmpty()) {
            Tf_Kembali.setText("Rp 0,00");
            return;
        }
        double bayar = parseRupiahToDouble(inputBayar);
        
         if (bayar < total) {
            JOptionPane.showMessageDialog(null, 
                "Pembayaran tidak mencukupi!\nMinimal pembayaran: " + formatRupiah(total), 
                "Validasi Pembayaran", 
                JOptionPane.WARNING_MESSAGE);
            Tf_Bayar.setText("");
            Tf_Kembali.setText("Rp 0,00");
            Tf_Bayar.requestFocus();
            return;
        }
        
       
        double kembalian = bayar - total;
        
       
        Tf_Bayar.setText(formatRupiah(bayar));
        Tf_Kembali.setText(formatRupiah(kembalian));
        
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "Format angka tidak valid!");
        Tf_Bayar.setText("");
        Tf_Kembali.setText("Rp 0,00");
    }
}
private String formatRupiah(double nilai) {
    DecimalFormat formatter = new DecimalFormat("Rp #,##0.00");
    return formatter.format(nilai);
}

// 
private double parseRupiahToDouble(String rupiah) throws NumberFormatException {
    try {
        String numericString = rupiah.replaceAll("[^\\d,.]", "")
                                   .replace(".", "")  
                                   .replace(",", ".");
        return Double.parseDouble(numericString);
    } catch (NumberFormatException e) {
        throw new NumberFormatException("Format angka tidak valid: " + rupiah);
    }
}
class NumericFilter extends DocumentFilter {
    @Override
    public void insertString(FilterBypass fb, int offset, String string, AttributeSet attr) 
            throws BadLocationException {
        StringBuilder sb = new StringBuilder();
        for (char c : string.toCharArray()) {
            if (Character.isDigit(c) || c == ',') {
                sb.append(c);
            }
        }
        super.insertString(fb, offset, sb.toString(), attr);
    }

    @Override
    public void replace(FilterBypass fb, int offset, int length, String text, AttributeSet attrs) 
            throws BadLocationException {
        StringBuilder sb = new StringBuilder();
        for (char c : text.toCharArray()) {
            if (Character.isDigit(c) || c == ',') {
                sb.append(c);
            }
        }
        super.replace(fb, offset, length, sb.toString(), attrs);
    }
}
public void SaveData() {
    String AmbilPelanggan = (String) Jc_Nama.getSelectedItem();
    String AmbilMerk = (String) Jc_Merk.getSelectedItem();
    String AmbilLayanan = (String) Jc_Layanan.getSelectedItem();
    
    String barcodePath = null;
    Connection conn = null;
    
    try {
        int idPelanggan = PilihId(Jc_Nama);
        int idKaryawan = PilihId(Jc_Karyawan);
        int idLayanan = PilihId(Jc_Layanan);
        int idBarang = PilihId(Jc_Merk);
        
        if (idPelanggan == -1 || idKaryawan == -1 || idLayanan == -1 || idBarang == -1) {
            JOptionPane.showMessageDialog(null, "Harap pilih semua data dengan benar");
            return;
        }

         if (Tf_Total == null || Tf_Total.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Total tidak boleh kosong!");
            return;
        }
        
        double total = 0;
        double Bayar = 0;
        double Kembalian = 0;
        
        try {
            total = parseRupiahToDouble(Tf_Total.getText().trim());
            Bayar = parseRupiahToDouble(Tf_Bayar.getText().trim());
            Kembalian = parseRupiahToDouble(Tf_Kembali.getText().trim());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Format angka tidak valid: " + e.getMessage());
            return;
        }
        
        LocalDateTime now = LocalDateTime.now();
        String itanggal = now.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));    
        String iwaktu = now.format(DateTimeFormatter.ofPattern("HH:mm:ss"));
        
        int estimasiord = Integer.parseInt(Tf_Estimasi.getText());
        LocalDateTime tanggalmasuk = LocalDateTime.now();
        LocalDateTime tanggalEstimasi = tanggalmasuk.plusDays(estimasiord);
        String Estimasi = tanggalEstimasi.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
        
        conn = Connector2.getkoneksi2();
        if (conn == null || conn.isClosed()) {
            JOptionPane.showMessageDialog(null, "Database connection failed");
            return;
        }
        
        conn.setAutoCommit(false);
        
        
        String barcode = Barcode.generateKode();
        if (barcode == null || barcode.isEmpty()) {
            throw new Exception("Gagal menghasilkan barcode");
        }
        
        barcodePath = Barcode.generateGambar(barcode, "barcodes");
        if (barcodePath == null) {
            throw new Exception("Gagal menghasilkan gambar barcode");
        }

        int idTransaksi = -1;
        String sql = "INSERT INTO transaksipemesanan (tanggal, waktu, total, Bayar, Kembali, id_pelanggan, id_barang, id_layanan, id_karyawan, Barcode, BarcodePath) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (PreparedStatement ps = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            ps.setString(1, itanggal);
            ps.setString(2, iwaktu);
            ps.setDouble(3, total);
            ps.setDouble(4, Bayar);
            ps.setDouble(5, Kembalian);
            ps.setInt(6, idPelanggan);
            ps.setInt(7, idBarang);
            ps.setInt(8, idLayanan);
            ps.setInt(9, idKaryawan);
            ps.setString(10, barcode);
            ps.setString(11, barcodePath);
            
            int affectedRows = ps.executeUpdate();
            if (affectedRows == 0) {
                throw new SQLException("Gagal menyimpan transaksi, tidak ada row yang terpengaruh");
            }

            
            try (ResultSet generatedKeys = ps.getGeneratedKeys()) {
                if (generatedKeys.next()) {
                    idTransaksi = generatedKeys.getInt(1);
                    
                    
                    String sql2 = "INSERT INTO pesanan (nama_pelanggan, layanan, nama_barang, catatan_pelanggan, status_pemesanan, tanggal_pesanan, tanggal_selesai, id_pelanggan, id_barang, id_layanan, id_transaksi, Barcode) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                    try (PreparedStatement ps2 = conn.prepareStatement(sql2)) {
                        ps2.setString(1, AmbilPelanggan);
                        ps2.setString(2, AmbilLayanan);
                        ps2.setString(3, AmbilMerk);
                        ps2.setString(4, Tf_Catatan.getText());
                        ps2.setString(5, "Sedang Diproses");
                        ps2.setString(6, itanggal);
                        ps2.setString(7, Estimasi);
                        ps2.setInt(8, idPelanggan);
                        ps2.setInt(9, idBarang);
                        ps2.setInt(10, idLayanan);
                        ps2.setInt(11, idTransaksi);
                        ps2.setString(12, barcode);
                        
                        ps2.executeUpdate();
                    }
                } else {
                    throw new SQLException("Gagal mendapatkan ID transaksi");
                }
            }
            
            conn.commit();
            cetakStruk(idTransaksi);
            JOptionPane.showMessageDialog(null, "Data berhasil disimpan");
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "Format total tidak valid");
    } catch (SQLException e) {
        try {
            if (conn != null) conn.rollback();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        JOptionPane.showMessageDialog(null, "Gagal menyimpan data: " + e.getMessage());
    } catch (Exception e) {
        if (barcodePath != null) {
            try {
                new File(barcodePath).delete();
            } catch (SecurityException ex) {
                System.err.println("Gagal menghapus file barcode: " + ex.getMessage());
            }
        }
        JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
    } finally {
        try {
            if (conn != null) {
                conn.setAutoCommit(true);
                conn.close();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
private void cetakStruk(int idTransaksi) {
    try {
        Connection conn = ConnectorH.getConnection();

        String path = "src/Custom/StrukPesanan.jasper";

        HashMap<String, Object> parameter = new HashMap<>();
        parameter.put("id_transaksi", idTransaksi);

        JasperPrint print = JasperFillManager.fillReport(path, parameter, conn);
        JasperViewer.viewReport(print, false);
    } catch (Exception ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Gagal mencetak struk: " + ex.getMessage());
    }
}
private void ResetForm() {
    Jc_Nama.setSelectedIndex(0);
    Jc_Merk.setSelectedIndex(0);
    Jc_Layanan.setSelectedIndex(0);
    Jc_Karyawan.setSelectedIndex(0);
    Tf_Catatan.setText("");
    Tf_Total.setText("0");
}


}

