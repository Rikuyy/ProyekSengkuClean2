/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package project;

import Custom.Connector;
import com.formdev.flatlaf.extras.FlatSVGIcon;
import java.awt.Frame;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.PreparedStatement;
import java.util.HashMap;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import java.sql.SQLException;
import javax.swing.JLabel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;


/**
 *
 * @author annisa eka syafni
 */
public class Drop extends javax.swing.JPanel {
private Connection conn;
    

    /**
     * Creates new form Drop
     */
    public Drop() {
        initComponents();
        importdb();
        conn = Connector.getkoneksi();
        Lb_Search.setIcon(new FlatSVGIcon("SVGDrp/bt_Search.svg", 22, 19));
        Lb_Drop.setIcon(new FlatSVGIcon("SVGDrp/Drop.svg", 108, 37));
        
    }
    
        
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton3 = new javax.swing.JButton();
        Bt_add = new javax.swing.JButton();
        Bt_Drop = new javax.swing.JButton();
        Tf_search = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabeldrop = new javax.swing.JTable();
        Lb_Search = new javax.swing.JLabel();
        Lb_Drop = new javax.swing.JLabel();
        Bt_Frglu = new javax.swing.JButton();
        Bt_Fclean = new javax.swing.JButton();
        Bt_Fripen = new javax.swing.JButton();
        Bt_Fbag = new javax.swing.JButton();
        Bt_Print = new javax.swing.JButton();
        Bt_FCap = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        Bt_add.setBackground(new java.awt.Color(61, 194, 236));
        Bt_add.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Bt_add.setForeground(new java.awt.Color(255, 255, 255));
        Bt_add.setText("ADD");
        Bt_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bt_addActionPerformed(evt);
            }
        });

        Bt_Drop.setBackground(new java.awt.Color(255, 204, 0));
        Bt_Drop.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Bt_Drop.setForeground(new java.awt.Color(255, 255, 255));
        Bt_Drop.setText("DROP");
        Bt_Drop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bt_DropActionPerformed(evt);
            }
        });

        Tf_search.setText("Search");
        Tf_search.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Tf_searchMouseClicked(evt);
            }
        });
        Tf_search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Tf_searchActionPerformed(evt);
            }
        });

        tabeldrop.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No", "ID Transaksi", "Nama", "No. Handphone", "Merk", "Service", "Time", "Type"
            }
        ));
        jScrollPane1.setViewportView(tabeldrop);

        Lb_Search.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Lb_SearchMouseClicked(evt);
            }
        });

        Bt_Frglu.setIcon(new FlatSVGIcon("SVGDrp/Reglue.svg", 225, 126));
        Bt_Frglu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bt_FrgluActionPerformed(evt);
            }
        });

        Bt_Fclean.setIcon(new FlatSVGIcon("SVGDrp/Cleaning.svg", 225, 126));
        Bt_Fclean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bt_FcleanActionPerformed(evt);
            }
        });

        Bt_Fripen.setIcon(new FlatSVGIcon("SVGDrp/Repaint.svg", 225, 126));
        Bt_Fripen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bt_FripenActionPerformed(evt);
            }
        });

        Bt_Fbag.setIcon(new FlatSVGIcon("SVGDrp/Bag.svg", 225, 126));
        Bt_Fbag.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bt_FbagActionPerformed(evt);
            }
        });

        Bt_Print.setBackground(new java.awt.Color(76, 59, 207));
        Bt_Print.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Bt_Print.setForeground(new java.awt.Color(255, 255, 255));
        Bt_Print.setText("PRINT");
        Bt_Print.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bt_PrintActionPerformed(evt);
            }
        });

        Bt_FCap.setIcon(new FlatSVGIcon("SVGDrp/Cap.svg", 225, 126));
        Bt_FCap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bt_FCapActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Lb_Drop, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Tf_search, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Lb_Search, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Bt_Fclean, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Bt_Frglu, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Bt_Fripen, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Bt_Fbag, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Bt_FCap, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(Bt_add, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 743, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(Bt_Drop, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(Bt_Print, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Lb_Drop, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 84, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Bt_Fbag, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Bt_FCap, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(Bt_Frglu, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                        .addComponent(Bt_Fclean, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Bt_Fripen, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Tf_search, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                    .addComponent(Lb_Search, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(Bt_add, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Bt_Drop, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Bt_Print, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(215, 215, 215))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void Bt_DropActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Bt_DropActionPerformed
        int selectedRow = tabeldrop.getSelectedRow();
        int selectedId = (int) tabeldrop.getValueAt(selectedRow, 1);
        boolean success = deleteTransaction(selectedId);
            if (success) {
                importdb(); 
            }
    }//GEN-LAST:event_Bt_DropActionPerformed

    private void Tf_searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Tf_searchActionPerformed
      
    }//GEN-LAST:event_Tf_searchActionPerformed

    private void Bt_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Bt_addActionPerformed
    MainAdd dialog = new MainAdd((Frame) SwingUtilities.getWindowAncestor(this));
    dialog.setVisible(true);
    
    }//GEN-LAST:event_Bt_addActionPerformed

    private void Tf_searchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Tf_searchMouseClicked
        clearsearch();
    }//GEN-LAST:event_Tf_searchMouseClicked

    private void Lb_SearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Lb_SearchMouseClicked
        performSearch();
    }//GEN-LAST:event_Lb_SearchMouseClicked

    private void Bt_FcleanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Bt_FcleanActionPerformed
        Filter1();
    }//GEN-LAST:event_Bt_FcleanActionPerformed
    private void Bt_FrgluActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Bt_FrgluActionPerformed
        Filter2();
    }//GEN-LAST:event_Bt_FrgluActionPerformed

    private void Bt_FripenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Bt_FripenActionPerformed
        Filter3();
    }//GEN-LAST:event_Bt_FripenActionPerformed

    private void Bt_FbagActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Bt_FbagActionPerformed
        Filter4();
    }//GEN-LAST:event_Bt_FbagActionPerformed

    private void Bt_PrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Bt_PrintActionPerformed
        cetakStruk();
    }//GEN-LAST:event_Bt_PrintActionPerformed

    private void Bt_FCapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Bt_FCapActionPerformed
       Filter5();
    }//GEN-LAST:event_Bt_FCapActionPerformed
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Bt_Drop;
    private javax.swing.JButton Bt_FCap;
    private javax.swing.JButton Bt_Fbag;
    private javax.swing.JButton Bt_Fclean;
    private javax.swing.JButton Bt_Frglu;
    private javax.swing.JButton Bt_Fripen;
    private javax.swing.JButton Bt_Print;
    private javax.swing.JButton Bt_add;
    private javax.swing.JLabel Lb_Drop;
    private javax.swing.JLabel Lb_Search;
    private javax.swing.JTextField Tf_search;
    private javax.swing.JButton jButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabeldrop;
    // End of variables declaration//GEN-END:variables
    public void performSearch() {
    String searchText = Tf_search.getText().trim();
    
    try {
        if (searchText.isEmpty()) {
            importdb();
        } else {
            search(searchText);
        }
    } catch (Exception e) {
        // Handle error (log it and/or show to user)
        JOptionPane.showMessageDialog(null, 
            "Error performing search: " + e.getMessage(),
            "Search Error", 
            JOptionPane.ERROR_MESSAGE);
    } finally {
        clearsearch();
    }
}
    public void importdb() {
        DefaultTableModel model = new DefaultTableModel();
        model.setRowCount(0); 
        model.addColumn("No");
        model.addColumn("ID Transaksi");
        model.addColumn("Nama");
        model.addColumn("No.Handphone");
        model.addColumn("Merk");
        model.addColumn("Service");
        model.addColumn("Time");
        model.addColumn("Type");
        
        try {
            Connection con = Connector.getkoneksi();
            Statement ps = con.createStatement();
            String query = "SELECT t.id_transaksi, p.nama_pelanggan, pe.no_hp, p.nama_barang, k.nama, t.waktu,  p.layanan"
                         + " From transaksipemesanan t\n" +
                           "LEFT JOIN pesanan p ON t.id_transaksi = p.id_transaksi\n" +
                           "LEFT JOIN pelanggan pe ON t.id_pelanggan = pe.id_pelanggan\n" +
                           "LEFT JOIN karyawan k ON t.id_karyawan = k.id_karyawan;"; // buat query buat nampilin data pelanggan
            ResultSet rs = ps.executeQuery(query);
            int Nomer = 1;
            while(rs.next()) {
                int Id = rs.getInt("id_transaksi");
                String Nama = rs.getString("nama_pelanggan");
                String Telp = rs.getString("no_hp");
                String Merek = rs.getString("nama_barang");
                String petugas = rs.getString("nama");
                String Waktu = rs.getString("waktu");
                String Type = rs.getString("layanan");
                model.addRow(new Object[]{Nomer, Id, Nama, Telp, Merek, petugas, Waktu, Type});
                Nomer++;
            }
            tabeldrop.setModel(model); 
            
            DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
            centerRenderer.setHorizontalAlignment(javax.swing.JLabel.CENTER);
            
            for (int i = 0; i < tabeldrop.getColumnCount(); i++) {
                tabeldrop.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
            }
            
        } catch (Exception e) {
            System.out.println("Gagal menampilkan data: " + e.getMessage());
        }
        tabeldrop.setModel(model); 
        tabeldrop.revalidate();    
        tabeldrop.repaint();  
    }
private void search(String searchText) {
    DefaultTableModel model = new DefaultTableModel();
    model.addColumn("No");
    model.addColumn("ID Transaksi");
    model.addColumn("Nama");
    model.addColumn("No.Handphone");
    model.addColumn("Merk");
    model.addColumn("Service");
    model.addColumn("Time");
    model.addColumn("Type");
    
    String query = "SELECT t.id_transaksi, p.nama_pelanggan, pe.no_hp, p.nama_barang, k.nama, t.waktu, p.layanan "
                 + "FROM transaksipemesanan t "
                 + "LEFT JOIN pesanan p ON t.id_transaksi = p.id_transaksi "
                 + "LEFT JOIN pelanggan pe ON t.id_pelanggan = pe.id_pelanggan "
                 + "LEFT JOIN karyawan k ON t.id_karyawan = k.id_karyawan "
                 + "WHERE p.Barcode LIKE ?";

    try (Connection con = Connector.getkoneksi();
         PreparedStatement ps = con.prepareStatement(query)) {
        
        ps.setString(1, "%" + searchText + "%");
        
        try (ResultSet rs = ps.executeQuery()) {
            int nomer = 1;
            while (rs.next()) {
                model.addRow(new Object[]{
                    nomer++,
                    rs.getInt("id_transaksi"),
                    rs.getString("nama_pelanggan"),
                    rs.getString("no_hp"),
                    rs.getString("nama_barang"),
                    rs.getString("nama"),
                    rs.getString("waktu"),
                    rs.getString("layanan")
                });
            }
        }
        
        tabeldrop.setModel(model);
        
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        
        for (int i = 0; i < tabeldrop.getColumnCount(); i++) {
            tabeldrop.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
        }
        
    } catch (SQLException e) {
        // Consider proper error handling/logging
        JOptionPane.showMessageDialog(null, "Error searching data: " + e.getMessage(), 
            "Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
}
private void Filter1(){
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("No");
        model.addColumn("ID Transaksi");
        model.addColumn("Nama");
        model.addColumn("No.Handphone");
        model.addColumn("Merk");
        model.addColumn("Service");
        model.addColumn("Time");
        model.addColumn("Type");
        
        
        try {
            Connection con = Connector.getkoneksi();
            Statement ps = con.createStatement();
            String query = "SELECT t.id_transaksi, p.nama_pelanggan, pe.no_hp, p.nama_barang, k.nama, t.waktu, p.layanan\n" +
"FROM transaksipemesanan t\n" +
"LEFT JOIN pesanan p ON t.id_transaksi = p.id_transaksi\n" +
"LEFT JOIN pelanggan pe ON t.id_pelanggan = pe.id_pelanggan\n" +
"LEFT JOIN karyawan k ON t.id_karyawan = k.id_karyawan\n" +
"WHERE p.layanan LIKE '%Cleaning(R%'\n" +
"OR p.layanan LIKE '%Cleaning(U%'\n" +
"OR p.layanan LIKE '%Cleaning(W%';";
                    
            ResultSet rs = ps.executeQuery(query);
            int nomer = 1;
            while(rs.next()) {
            model.addRow(new Object[]{
                nomer++,
                rs.getString("id_transaksi"),
                rs.getString("nama_pelanggan"),
                rs.getString("no_hp"),
                rs.getString("nama_barang"),
                rs.getString("nama"),
                rs.getString("waktu"),
                rs.getString("layanan")
            });
        }
        tabeldrop.setModel(model);
        
        
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(javax.swing.JLabel.CENTER);
        
        for (int i = 0; i < tabeldrop.getColumnCount(); i++) {
            tabeldrop.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
        }
        
    } catch (Exception e) {
        System.out.println("Gagal menampilkan data: " + e.getMessage());
    }  
    }
private void Filter2(){
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("No"); 
        model.addColumn("ID Transaksi");
        model.addColumn("Nama");
        model.addColumn("No.Handphone");
        model.addColumn("Merk");
        model.addColumn("Service");
        model.addColumn("Time");
        model.addColumn("Type");
        
        
        try {
            Connection con = Connector.getkoneksi();
            Statement ps = con.createStatement();
            String query = "SELECT t.id_transaksi, p.nama_pelanggan, pe.no_hp, p.nama_barang, k.nama, t.waktu, p.layanan\n" +
"FROM transaksipemesanan t\n" +
"LEFT JOIN pesanan p ON t.id_transaksi = p.id_transaksi\n" +
"LEFT JOIN pelanggan pe ON t.id_pelanggan = pe.id_pelanggan\n" +
"LEFT JOIN karyawan k ON t.id_karyawan = k.id_karyawan\n" +
"WHERE p.layanan LIKE '%Reglue(S%'\n" +
"OR p.layanan LIKE '%Reglue(M%'\n" +
"OR p.layanan LIKE '%Reglue(H%'\n" +
"OR p.layanan LIKE '%Reglue(T%';";
                    
            ResultSet rs = ps.executeQuery(query);
            int nomer = 1;
            while(rs.next()) {
            model.addRow(new Object[]{
                nomer++,
                rs.getString("id_transaksi"),
                rs.getString("nama_pelanggan"),
                rs.getString("no_hp"),
                rs.getString("nama_barang"),
                rs.getString("nama"),
                rs.getString("waktu"),
                rs.getString("layanan")
            });
        }
        tabeldrop.setModel(model);
        
        
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(javax.swing.JLabel.CENTER);
        
        for (int i = 0; i < tabeldrop.getColumnCount(); i++) {
            tabeldrop.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
        }
        
    } catch (Exception e) {
        System.out.println("Gagal menampilkan data: " + e.getMessage());
    }  
    }
private void Filter3(){
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("No"); 
        model.addColumn("ID Transaksi");
        model.addColumn("Nama");
        model.addColumn("No.Handphone");
        model.addColumn("Merk");
        model.addColumn("Service");
        model.addColumn("Time");
        model.addColumn("Type");
        
        
        try {
            Connection con = Connector.getkoneksi();
            Statement ps = con.createStatement();
            String query = "SELECT t.id_transaksi, p.nama_pelanggan, pe.no_hp, p.nama_barang, k.nama, t.waktu, p.layanan\n" +
"FROM transaksipemesanan t\n" +
"LEFT JOIN pesanan p ON t.id_transaksi = p.id_transaksi\n" +
"LEFT JOIN pelanggan pe ON t.id_pelanggan = pe.id_pelanggan\n" +
"LEFT JOIN karyawan k ON t.id_karyawan = k.id_karyawan\n" +
"WHERE p.layanan LIKE '%Repaint(M%'\n" +
"OR p.layanan LIKE '%Repaint(U%';";
                    
            ResultSet rs = ps.executeQuery(query);
            int nomer = 1;
            while(rs.next()) {
            model.addRow(new Object[]{
                nomer++,
                rs.getString("id_transaksi"),
                rs.getString("nama_pelanggan"),
                rs.getString("no_hp"),
                rs.getString("nama_barang"),
                rs.getString("nama"),
                rs.getString("waktu"),
                rs.getString("layanan")
            });
        }
        tabeldrop.setModel(model);
        
        
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(javax.swing.JLabel.CENTER);
        
        for (int i = 0; i < tabeldrop.getColumnCount(); i++) {
            tabeldrop.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
        }
        
    } catch (Exception e) {
        System.out.println("Gagal menampilkan data: " + e.getMessage());
    }  
    }
private void Filter4(){
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("No"); 
        model.addColumn("ID Transaksi");
        model.addColumn("Nama");
        model.addColumn("No.Handphone");
        model.addColumn("Merk");
        model.addColumn("Service");
        model.addColumn("Time");
        model.addColumn("Type");
        
        
        try {
            Connection con = Connector.getkoneksi();
            Statement ps = con.createStatement();
            String query = "SELECT t.id_transaksi, p.nama_pelanggan, pe.no_hp, p.nama_barang, k.nama, t.waktu, p.layanan\n" +
"FROM transaksipemesanan t\n" +
"LEFT JOIN pesanan p ON t.id_transaksi = p.id_transaksi\n" +
"LEFT JOIN pelanggan pe ON t.id_pelanggan = pe.id_pelanggan\n" +
"LEFT JOIN karyawan k ON t.id_karyawan = k.id_karyawan\n" +
"WHERE p.layanan LIKE '%Bag(M%'\n" +
"OR p.layanan LIKE '%Bag(S%';";
                    
            ResultSet rs = ps.executeQuery(query);
            int nomer = 1;
            while(rs.next()) {
            model.addRow(new Object[]{
                nomer++,
                rs.getString("id_transaksi"),
                rs.getString("nama_pelanggan"),
                rs.getString("no_hp"),
                rs.getString("nama_barang"),
                rs.getString("nama"),
                rs.getString("waktu"),
                rs.getString("layanan")
            });
        }
        tabeldrop.setModel(model);
        
        
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(javax.swing.JLabel.CENTER);
        
        for (int i = 0; i < tabeldrop.getColumnCount(); i++) {
            tabeldrop.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
        }
        
    } catch (Exception e) {
        System.out.println("Gagal menampilkan data: " + e.getMessage());
    }  
    }
private void Filter5(){
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("No");
        model.addColumn("ID Transaksi");
        model.addColumn("Nama");
        model.addColumn("No.Handphone");
        model.addColumn("Merk");
        model.addColumn("Service");
        model.addColumn("Time");
        model.addColumn("Type");
        
        
        try {
            Connection con = Connector.getkoneksi();
            Statement ps = con.createStatement();
            String query = "SELECT t.id_transaksi, p.nama_pelanggan, pe.no_hp, p.nama_barang, k.nama, t.waktu, p.layanan\n" +
"FROM transaksipemesanan t\n" +
"LEFT JOIN pesanan p ON t.id_transaksi = p.id_transaksi\n" +
"LEFT JOIN pelanggan pe ON t.id_pelanggan = pe.id_pelanggan\n" +
"LEFT JOIN karyawan k ON t.id_karyawan = k.id_karyawan\n" +
"WHERE p.layanan LIKE '%Cap(R%'\n" +
"OR p.layanan LIKE '%Cleaning(W%';";
                    
            ResultSet rs = ps.executeQuery(query);
            int nomer = 1;
            while(rs.next()) {
            model.addRow(new Object[]{
                nomer++,
                rs.getString("id_transaksi"),
                rs.getString("nama_pelanggan"),
                rs.getString("no_hp"),
                rs.getString("nama_barang"),
                rs.getString("nama"),
                rs.getString("waktu"),
                rs.getString("layanan")
            });
        }
        tabeldrop.setModel(model);
        
        
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(javax.swing.JLabel.CENTER);
        
        for (int i = 0; i < tabeldrop.getColumnCount(); i++) {
            tabeldrop.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
        }
        
    } catch (Exception e) {
        System.out.println("Gagal menampilkan data: " + e.getMessage());
    }  
    }
private void cetakStruk() {
    int selectedRow = tabeldrop.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Pilih baris terlebih dahulu");
        return;
    }

    String idTransaksi = tabeldrop.getValueAt(selectedRow, 1).toString(); // kolom pertama id_transaksi

    try {
        // Ganti URL, user, dan password sesuai konfigurasi database kamu
        Connection conn = Connector.getkoneksi();

        String path = "src/Custom/Setruk.jasper"; // path ke file .jasper kamu

        HashMap<String, Object> parameter = new HashMap<>();
        parameter.put("id_transaksi", idTransaksi);

        JasperPrint print = JasperFillManager.fillReport(path, parameter, conn);
        JasperViewer.viewReport(print, false);
    } catch (Exception ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Gagal mencetak struk: " + ex.getMessage());
    }
}

public boolean deleteTransaction(int idTransaksi) {
    
    int confirm = JOptionPane.showConfirmDialog(
        null,
        "Are you sure you want to delete transaction ID: " + idTransaksi + "?",
        "Confirm Deletion",
        JOptionPane.YES_NO_OPTION,
        JOptionPane.WARNING_MESSAGE
    );

    if (confirm != JOptionPane.YES_OPTION) {
        return false; // User cancelled the deletion
    }

    String sql = "DELETE FROM transaksipemesanan WHERE id_transaksi = ?";
    
    try (Connection conn = Connector.getkoneksi();
         PreparedStatement pstmt = conn.prepareStatement(sql)) {
        
        pstmt.setInt(1, idTransaksi);
        int affectedRows = pstmt.executeUpdate();
        
        if (affectedRows > 0) {
            JOptionPane.showMessageDialog(
                null,
                "Transaction ID " + idTransaksi + " deleted successfully!",
                "Success",
                JOptionPane.INFORMATION_MESSAGE
            );
            return true;
        } else {
            JOptionPane.showMessageDialog(
                null,
                "Transaction ID " + idTransaksi + " not found!",
                "Not Found",
                JOptionPane.WARNING_MESSAGE
            );
            return false;
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(
            null,
            "Error deleting transaction: " + e.getMessage(),
            "Database Error",
            JOptionPane.ERROR_MESSAGE
        );
        // Log the full error for debugging
        e.printStackTrace();
        return false;
    }
}
private void clearsearch(){
        Tf_search.setText("");
    }
}
