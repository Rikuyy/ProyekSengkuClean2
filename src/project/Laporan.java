/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package project;
import Custom.Connector;
import java.awt.Desktop;
import java.io.File;
import java.sql.*;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.text.NumberFormat;
import java.util.Locale;













/**
 *
 * @author annisa eka syafni
 */

public class Laporan extends javax.swing.JPanel {
   private void loadDataLaporan(String order) {
    importdb ();
        }
   
   public void exportToExcel(JTable table) throws Exception {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Simpan Laporan Excel");
        fileChooser.setFileFilter(new FileNameExtensionFilter("Excel Files (*.xlsx)", "xlsx"));
        fileChooser.setSelectedFile(new File("Laporan_Sengkuclean Tanggal.xlsx"));
        
        int userSelection = fileChooser.showSaveDialog(this);
        if (userSelection != JFileChooser.APPROVE_OPTION) {
            return;
        }
        
        File fileToSave = fileChooser.getSelectedFile();
        String filePath = fileToSave.getAbsolutePath();
        
        if (!filePath.toLowerCase().endsWith(".xlsx")) {
            fileToSave = new File(filePath + ".xlsx");
            filePath = fileToSave.getAbsolutePath();
        }
        
        try (Workbook workbook = new XSSFWorkbook()) {
            Sheet sheet = workbook.createSheet("Laporan");
            
            // Create header row with style
            Row headerRow = sheet.createRow(0);
            CellStyle headerStyle = createHeaderStyle(workbook);
            
            for (int i = 0; i < table.getColumnCount(); i++) {
                Cell cell = headerRow.createCell(i);
                cell.setCellValue(table.getColumnName(i));
                cell.setCellStyle(headerStyle);
            }
            
            // Create data rows
            for (int i = 0; i < table.getRowCount(); i++) {
                Row row = sheet.createRow(i + 1);
                for (int j = 0; j < table.getColumnCount(); j++) {
                    Object value = table.getValueAt(i, j);
                    row.createCell(j).setCellValue(value != null ? value.toString() : "");
                }
            }
            
            // Auto-size columns
            for (int i = 0; i < table.getColumnCount(); i++) {
                sheet.autoSizeColumn(i);
            }
            
            // Write to file
            try (FileOutputStream out = new FileOutputStream(fileToSave)) {
                workbook.write(out);
                JOptionPane.showMessageDialog(this, 
                    "Laporan berhasil disimpan di:\n" + filePath,
                    "Sukses",
                    JOptionPane.INFORMATION_MESSAGE);
                
                // Open the file after saving (optional)
                Desktop.getDesktop().open(fileToSave);
            } catch (IOException e) {
    JOptionPane.showMessageDialog(this, "Gagal menyimpan file: " + e.getMessage());
    e.printStackTrace();


        }
    }
}
        


    public static void main(String[] args) {
    // Set Look and Feel sesuai sistem (opsional)
    try {
        javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
    } catch (Exception ex) {
        ex.printStackTrace();
    }

    // Tampilkan panel Laporan dalam JFrame
    javax.swing.SwingUtilities.invokeLater(() -> {
        javax.swing.JFrame frame = new javax.swing.JFrame("Laporan - Sengkuclean");
        frame.setDefaultCloseOperation(javax.swing.JFrame.EXIT_ON_CLOSE);
        frame.setContentPane(new Laporan()); // panel ini ditampilkan
        frame.setSize(1280, 840); // ukuran default panel
        frame.setLocationRelativeTo(null); // ditampilkan di tengah layar
        frame.setVisible(true);
    });
}


    /**
     * Creates new form Laporan
     */
    
    

public Laporan() {
    initComponents();
    loadDataLaporan("DESC");
    
    
    
}
 // Default: Newest



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabelreport = new javax.swing.JTable();
        printbtpdf = new javax.swing.JButton();
        printbt1 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(1280, 840));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setMinimumSize(new java.awt.Dimension(1280, 840));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Desain/Report1.png"))); // NOI18N
        jLabel1.setMaximumSize(new java.awt.Dimension(130, 38));
        jLabel1.setMinimumSize(new java.awt.Dimension(130, 38));
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, -10, 180, 70));

        tabelreport.setAutoCreateRowSorter(true);
        tabelreport.setBackground(new java.awt.Color(0, 0, 102));
        tabelreport.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        tabelreport.setForeground(new java.awt.Color(255, 255, 255));
        tabelreport.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "No", "Name", "No Handphone", "Merk", "Service", "Date", "Type"
            }
        ));
        tabelreport.setSelectionBackground(new java.awt.Color(0, 0, 255));
        tabelreport.setSelectionForeground(new java.awt.Color(51, 51, 255));
        jScrollPane2.setViewportView(tabelreport);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 140, 1120, 410));

        printbtpdf.setBackground(new java.awt.Color(102, 204, 255));
        printbtpdf.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        printbtpdf.setForeground(new java.awt.Color(255, 255, 255));
        printbtpdf.setText("Print Excel");
        printbtpdf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printbtpdfActionPerformed(evt);
            }
        });
        add(printbtpdf, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 580, 120, 40));

        printbt1.setBackground(new java.awt.Color(102, 204, 255));
        printbt1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        printbt1.setForeground(new java.awt.Color(255, 255, 255));
        printbt1.setText("Print PDF");
        printbt1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printbt1ActionPerformed(evt);
            }
        });
        add(printbt1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 580, 120, 40));

        jComboBox1.setBackground(new java.awt.Color(255, 204, 0));
        jComboBox1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jComboBox1.setForeground(new java.awt.Color(255, 255, 255));
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Today", "This Week", "This Month", "This Year" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 10, 160, 30));
    }// </editor-fold>//GEN-END:initComponents

    private void printbtpdfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printbtpdfActionPerformed
       try {
           // TODO add your handling code here:

           exportToExcel(tabelreport);
       } catch (Exception ex) {
           Logger.getLogger(Laporan.class.getName()).log(Level.SEVERE, null, ex);
       }
        
        
       
                                       
   

    
    


    }//GEN-LAST:event_printbtpdfActionPerformed

    private void printbt1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printbt1ActionPerformed
    
        // TODO add your handling code here:
        try {
        boolean complete = tabelreport.print(JTable.PrintMode.FIT_WIDTH);
        if (complete) {
            JOptionPane.showMessageDialog(this, "Laporan berhasil dikirim ke printer.", "Informasi", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Pencetakan dibatalkan.", "Informasi", JOptionPane.WARNING_MESSAGE);
        }
    } catch (java.awt.print.PrinterException e) {
        JOptionPane.showMessageDialog(this, "Gagal mencetak: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
        
        
    }//GEN-LAST:event_printbt1ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
         String selected = (String) jComboBox1.getSelectedItem();
    importdb(selected);
    }//GEN-LAST:event_jComboBox1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton printbt1;
    private javax.swing.JButton printbtpdf;
    private javax.swing.JTable tabelreport;
    // End of variables declaration//GEN-END:variables
void importdb() {
    DefaultTableModel model = new DefaultTableModel();
    
        model.addColumn("No");
        model.addColumn("Name");
        model.addColumn("Phone Number");
        model.addColumn("Merk");
        model.addColumn("Service");
        model.addColumn("Date");
        model.addColumn("Type");        
        model.addColumn("Amount");

        
        try {
      
 Connection con = Connector.getkoneksi(); // Make sure koneksi class exists and getkoneksi() is static
    Statement ps = con.createStatement();
            String query = "SELECT p.nama_pelanggan, pe.no_hp, b.merk, k.nama, " +
               "t.tanggal, p.layanan, t.total " +
               "FROM transaksipemesanan t " +
               "LEFT JOIN pesanan p ON t.id_transaksi = p.id_transaksi " +
               "LEFT JOIN pelanggan pe ON t.id_pelanggan = pe.id_pelanggan " +
               "LEFT JOIN karyawan k ON t.id_karyawan = k.id_karyawan " +
               "LEFT JOIN barang b ON p.id_barang = b.id_barang " +
               "ORDER BY t.tanggal ASC;";

            ResultSet rs = ps.executeQuery(query);
            
            
         
int rowNo = 1;
int totalKeseluruhan = 0;

while(rs.next()) {
    String Nama = rs.getString("nama_pelanggan");
    String Nomer = rs.getString("no_hp");
    String Merek = rs.getString("merk");
    String petugas = rs.getString("nama");
    String Tanggal = rs.getString("tanggal");
    String Type = rs.getString("layanan");    
    int totalValue = rs.getInt("total");

    totalKeseluruhan += totalValue;

    NumberFormat nf = NumberFormat.getInstance(new Locale("id", "ID"));
    String Total = "Rp. " + nf.format(totalValue);

    model.addRow(new Object[]{rowNo, Nama, Nomer, Merek, petugas, Tanggal, Type, Total});
    rowNo++;
}

// Tambah baris jumlah total keseluruhan
NumberFormat nf = NumberFormat.getInstance(new Locale("id", "ID"));
String totalFormatted = "Rp. " + nf.format(totalKeseluruhan);
model.addRow(new Object[]{"", "", "", "", "", "", "Total Amount", totalFormatted});

tabelreport.setModel(model);


            
            
            
            DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
            centerRenderer.setHorizontalAlignment(javax.swing.JLabel.CENTER);
            
            for (int i = 0; i < tabelreport.getColumnCount(); i++) {
                tabelreport.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
            
            }
            
            
        } catch (Exception e) {
            System.out.println("Gagal menampilkan data: " + e.getMessage());
            e.printStackTrace();
        }
        
}

void importdb(String filter) {
    DefaultTableModel model = new DefaultTableModel();
    model.addColumn("No");
    model.addColumn("Name");
    model.addColumn("Phone Number");
    model.addColumn("Merk");
    model.addColumn("Service");
    model.addColumn("Date");
    model.addColumn("Type");
    model.addColumn("Amount");

    try {
        Connection con = Connector.getkoneksi();
        Statement ps = con.createStatement();

        String where = "";
        switch (filter) {
            case "Today":
                where = "WHERE DATE(t.tanggal) = CURDATE()";
                break;
            case "This Week":
                where = "WHERE YEARWEEK(t.tanggal, 1) = YEARWEEK(CURDATE(), 1)";
                break;
            case "This Month":
                where = "WHERE YEAR(t.tanggal) = YEAR(CURDATE()) AND MONTH(t.tanggal) = MONTH(CURDATE())";
                break;
            case "This Year":
                where = "WHERE YEAR(t.tanggal) = YEAR(CURDATE())";
                break;
            default:
                where = ""; // fallback semua data
                break;
        }

        String query = "SELECT p.nama_pelanggan, pe.no_hp, b.merk, k.nama, " +
               "t.tanggal, p.layanan, t.total " +
               "FROM transaksipemesanan t " +
               "LEFT JOIN pesanan p ON t.id_transaksi = p.id_transaksi " +
               "LEFT JOIN pelanggan pe ON t.id_pelanggan = pe.id_pelanggan " +
               "LEFT JOIN karyawan k ON t.id_karyawan = k.id_karyawan " +
               "LEFT JOIN barang b ON p.id_barang = b.id_barang " +
               where + " ORDER BY t.tanggal ASC";


        ResultSet rs = ps.executeQuery(query);
       
int rowNo = 1;
int totalKeseluruhan = 0;

while(rs.next()) {
    String Nama = rs.getString("nama_pelanggan");
    String Nomer = rs.getString("no_hp");
    String Merek = rs.getString("merk");
    String petugas = rs.getString("nama");
    String Tanggal = rs.getString("tanggal");
    String Type = rs.getString("layanan");    
    int totalValue = rs.getInt("total");

    totalKeseluruhan += totalValue;

    NumberFormat nf = NumberFormat.getInstance(new Locale("id", "ID"));
    String Total = "Rp. " + nf.format(totalValue);

    model.addRow(new Object[]{rowNo, Nama, Nomer, Merek, petugas, Tanggal, Type, Total});
    rowNo++;
}

// Tambah baris jumlah total keseluruhan
NumberFormat nf = NumberFormat.getInstance(new Locale("id", "ID"));
String totalFormatted = "Rp. " + nf.format(totalKeseluruhan);
model.addRow(new Object[]{"", "", "", "", "", "", "Total Amount", totalFormatted});

tabelreport.setModel(model);


        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(javax.swing.JLabel.CENTER);
        for (int i = 0; i < tabelreport.getColumnCount(); i++) {
            tabelreport.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
        }

    } catch (Exception e) {
        System.out.println("Gagal menampilkan data: " + e.getMessage());
        e.printStackTrace();
    }
}

   private CellStyle createHeaderStyle(Workbook workbook) {
    CellStyle style = workbook.createCellStyle();
    Font font = workbook.createFont();
    font.setBold(true);
    font.setColor(IndexedColors.WHITE.getIndex());
    style.setFont(font);
    style.setFillForegroundColor(IndexedColors.BLUE.getIndex());
    style.setFillPattern(FillPatternType.SOLID_FOREGROUND);
    style.setAlignment(HorizontalAlignment.CENTER);
    return style;
    
    
}

}



