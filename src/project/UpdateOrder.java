/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package project;

import Custom.Connector;
import Custom.ConnectorH;
import Custom.NoteLength;
import com.formdev.flatlaf.FlatLightLaf;
import com.formdev.flatlaf.extras.FlatSVGIcon;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.AbstractDocument;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DocumentFilter;

/**
 *
 * @author OZ
 */
public class UpdateOrder extends javax.swing.JDialog {
    private String originalEstimation;
    private javax.swing.JLabel Lb_InstruksiEstimasi;
    private int currentOrderId;
    private boolean dataUpdated = false;
    private DataUpdateListener listener;
    public interface DataUpdateListener {
        void onOrderUpdated(int updatedOrderId);
    }
    /**
     * 
     */
    public void setDataUpdateListener(DataUpdateListener listener) {
        this.listener = listener;
    }
    public UpdateOrder(java.awt.Frame parent, boolean modal, int idTransaksi) {
        super(parent, modal);
        this.currentOrderId = idTransaksi;
        initComponents();
        Jc_Status.removeAllItems();
        for (StatusPemesanan status : StatusPemesanan.values()) {
        Jc_Status.addItem(status.toString());
    }
        Jc_Status.addActionListener(e -> {
            String selectedStatus = (String) Jc_Status.getSelectedItem();
            if ("Perlu Pengulangan".equals(selectedStatus)) {
                enableDateExtension();
            } else {
                disableDateExtension();
         }
        });
        Tf_Nama.setEditable(false);
        Tf_Merk.setEditable(false);
        Tf_Layanan.setEditable(false);
        Tf_Estimasi.setEditable(false);
            ((AbstractDocument) Tf_Estimasi.getDocument()).setDocumentFilter(new DocumentFilter() {
                   @Override
                   public void insertString(DocumentFilter.FilterBypass fb, int offset, String string, AttributeSet attr) 
                           throws BadLocationException {
                       string = string.replaceAll("[^0-9/]", "");
                       super.insertString(fb, offset, string, attr);
                   }

                   @Override
                   public void replace(DocumentFilter.FilterBypass fb, int offset, int length, String text, AttributeSet attrs) 
                           throws BadLocationException {
                       text = text.replaceAll("[^0-9/]", "");
                       super.replace(fb, offset, length, text, attrs);
                   }
               });
            originalEstimation = Tf_Estimasi.getText();
            Lb_InstruksiEstimasi = new javax.swing.JLabel();
            Lb_InstruksiEstimasi.setFont(new java.awt.Font("Segoe UI", 0, 11)); 
            Lb_InstruksiEstimasi.setForeground(new java.awt.Color(100, 100, 100));
            Lb_InstruksiEstimasi.setText("Masukkan jumlah hari tambahan");
            Lb_InstruksiEstimasi.setVisible(false);
            jPanel1.add(Lb_InstruksiEstimasi);
        Tf_Total.setEditable(false);
        setupCatatanField();
        setLocationRelativeTo(parent);
        setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
    @Override
        public void windowClosing(java.awt.event.WindowEvent e) {
        Bt_BatalActionPerformed(null);
    }
});
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        Lb_Nama = new javax.swing.JLabel();
        Tf_Nama = new javax.swing.JTextField();
        Lb_Merk = new javax.swing.JLabel();
        Tf_Merk = new javax.swing.JTextField();
        Lb_Layanan = new javax.swing.JLabel();
        Tf_Layanan = new javax.swing.JTextField();
        Bt_Simpan = new javax.swing.JButton();
        Bt_Batal = new javax.swing.JButton();
        Lb_Title = new javax.swing.JLabel();
        Lb_Estimasi = new javax.swing.JLabel();
        Tf_Estimasi = new javax.swing.JTextField();
        Tf_Total = new javax.swing.JTextField();
        Lb_Catatan = new javax.swing.JLabel();
        Lb_Total1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Tf_Catatan = new javax.swing.JTextArea();
        Jc_Status = new javax.swing.JComboBox<>();
        Lb_Status = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        Lb_Nama.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Lb_Nama.setText("Nama");

        Tf_Nama.setBackground(new java.awt.Color(233, 231, 231));
        Tf_Nama.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Tf_NamaActionPerformed(evt);
            }
        });

        Lb_Merk.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Lb_Merk.setText("Merk");

        Tf_Merk.setBackground(new java.awt.Color(233, 231, 231));
        Tf_Merk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Tf_MerkActionPerformed(evt);
            }
        });

        Lb_Layanan.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Lb_Layanan.setText("Layanan");

        Tf_Layanan.setBackground(new java.awt.Color(233, 231, 231));
        Tf_Layanan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Tf_LayananActionPerformed(evt);
            }
        });

        Bt_Simpan.setBackground(new java.awt.Color(51, 51, 255));
        Bt_Simpan.setForeground(new java.awt.Color(255, 255, 255));
        Bt_Simpan.setText("Simpan");
        Bt_Simpan.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Bt_SimpanMouseClicked(evt);
            }
        });
        Bt_Simpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bt_SimpanActionPerformed(evt);
            }
        });

        Bt_Batal.setBackground(new java.awt.Color(204, 0, 0));
        Bt_Batal.setForeground(new java.awt.Color(255, 255, 255));
        Bt_Batal.setText("Batal");
        Bt_Batal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bt_BatalActionPerformed(evt);
            }
        });

        Lb_Title.setFont(new java.awt.Font("Century751 No2 BT", 1, 16)); // NOI18N
        Lb_Title.setText("Detail Pesanan");

        Lb_Estimasi.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Lb_Estimasi.setText("Estimasi");

        Tf_Estimasi.setBackground(new java.awt.Color(233, 231, 231));
        Tf_Estimasi.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                Tf_EstimasiFocusLost(evt);
            }
        });
        Tf_Estimasi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Tf_EstimasiActionPerformed(evt);
            }
        });
        Tf_Estimasi.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                Tf_EstimasiKeyPressed(evt);
            }
        });

        Tf_Total.setBackground(new java.awt.Color(233, 231, 231));
        Tf_Total.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Tf_TotalActionPerformed(evt);
            }
        });

        Lb_Catatan.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Lb_Catatan.setText("Catatan");

        Lb_Total1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Lb_Total1.setText("Total");

        Tf_Catatan.setColumns(20);
        Tf_Catatan.setRows(5);
        jScrollPane1.setViewportView(Tf_Catatan);

        Jc_Status.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        Lb_Status.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Lb_Status.setText("Status");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Lb_Title, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Lb_Nama)
                    .addComponent(Tf_Nama, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Lb_Estimasi)
                    .addComponent(Tf_Estimasi, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Lb_Merk)
                    .addComponent(Tf_Merk, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Lb_Layanan)
                    .addComponent(Tf_Layanan, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(Bt_Simpan)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Bt_Batal, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Tf_Total)
                            .addComponent(Lb_Total1)
                            .addComponent(Lb_Status)
                            .addComponent(Lb_Catatan)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Jc_Status, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Lb_Title, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(Lb_Nama)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Tf_Nama, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Lb_Merk)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Tf_Merk, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Lb_Layanan)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Tf_Layanan, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Lb_Estimasi)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Tf_Estimasi, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(Lb_Total1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Tf_Total, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Lb_Catatan)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(Jc_Status, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(Lb_Status))
                        .addGap(12, 12, 12)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 92, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Bt_Simpan)
                    .addComponent(Bt_Batal))
                .addGap(18, 18, 18))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Tf_NamaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Tf_NamaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Tf_NamaActionPerformed

    private void Tf_MerkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Tf_MerkActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Tf_MerkActionPerformed

    private void Tf_LayananActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Tf_LayananActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Tf_LayananActionPerformed

    private void Bt_SimpanMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Bt_SimpanMouseClicked
        try {
        // Validasi input sebelum update
        if (validateInput()) {
            // Eksekusi update data
            if (updateData()) { 
                this.dataUpdated = true;
                this.dispose();  
            }
        }
    } catch (SQLException e) {
        // Handle error database
        JOptionPane.showMessageDialog(this, 
            "Gagal menyimpan data: " + e.getMessage(),
            "Database Error",
            JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    } catch (ParseException e) {
        // Handle error format tanggal
        JOptionPane.showMessageDialog(this, 
            "Format tanggal tidak valid: " + e.getMessage(),
            "Input Error",
            JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_Bt_SimpanMouseClicked

    private void Bt_BatalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Bt_BatalActionPerformed
this.dispose();
    }//GEN-LAST:event_Bt_BatalActionPerformed

    private void Tf_EstimasiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Tf_EstimasiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Tf_EstimasiActionPerformed

    private void Tf_TotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Tf_TotalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Tf_TotalActionPerformed

    private void Bt_SimpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Bt_SimpanActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Bt_SimpanActionPerformed

    private void Tf_EstimasiFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tf_EstimasiFocusLost
        if (Tf_Estimasi.isEditable()) { 
            updateEstimationDate();
        }
    }//GEN-LAST:event_Tf_EstimasiFocusLost

    private void Tf_EstimasiKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Tf_EstimasiKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            updateEstimationDate();
        }
    }//GEN-LAST:event_Tf_EstimasiKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UpdateOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UpdateOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UpdateOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UpdateOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        FlatLightLaf.setup();
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run(int idTransaksi) {
                UpdateOrder dialog = new UpdateOrder(new javax.swing.JFrame(), true, idTransaksi);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }

            @Override
            public void run() {
                throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Bt_Batal;
    private javax.swing.JButton Bt_Simpan;
    private javax.swing.JComboBox<String> Jc_Status;
    private javax.swing.JLabel Lb_Catatan;
    private javax.swing.JLabel Lb_Estimasi;
    private javax.swing.JLabel Lb_Layanan;
    private javax.swing.JLabel Lb_Merk;
    private javax.swing.JLabel Lb_Nama;
    private javax.swing.JLabel Lb_Status;
    private javax.swing.JLabel Lb_Title;
    private javax.swing.JLabel Lb_Total1;
    private javax.swing.JTextArea Tf_Catatan;
    private javax.swing.JTextField Tf_Estimasi;
    private javax.swing.JTextField Tf_Layanan;
    private javax.swing.JTextField Tf_Merk;
    private javax.swing.JTextField Tf_Nama;
    private javax.swing.JTextField Tf_Total;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
    public boolean isDataUpdated() {
    return dataUpdated;
}
    public void setNama(String nama) {
        Tf_Nama.setText(nama);
    }
    
    public void setMerk(String merk) {
        Tf_Merk.setText(merk);
    }
    public void setLayanan(String layanan) {
        Tf_Layanan.setText(layanan);
    }
    
    public void setEstimasi(String Estimasi) {
       try {
        this.originalEstimation = formatDbToDisplay(Estimasi); 
        Tf_Estimasi.setText(this.originalEstimation);
    } catch (ParseException e) {
        this.originalEstimation = "01/01/2025";
        Tf_Estimasi.setText("Format Invalid");
        System.err.println("Error parsing DB date: " + Estimasi);
    }
    }
        private String formatDbToDisplay(String dbDate) throws ParseException {
            SimpleDateFormat dbFormat = new SimpleDateFormat("yyyy-MM-dd");
            SimpleDateFormat displayFormat = new SimpleDateFormat("dd/MM/yyyy");
            return displayFormat.format(dbFormat.parse(dbDate));
        }


        private void updateOriginalEstimation() {
            Tf_Estimasi.setText(this.originalEstimation);
        }
        private void enableDateExtension() {
            Tf_Estimasi.setEditable(true);
            Tf_Estimasi.setText("0");
            Tf_Estimasi.setBackground(Color.WHITE);
            Tf_Estimasi.setToolTipText("Masukkan jumlah hari yang perlu ditambahkan ke estimasi awal");
            Lb_InstruksiEstimasi.setVisible(true);
            Tf_Estimasi.selectAll();
            Tf_Estimasi.requestFocus();
        }

        private void disableDateExtension() {
            Tf_Estimasi.setEditable(false);
            Tf_Estimasi.setBackground(new Color(240, 240, 240)); // Warna disabled
            Lb_InstruksiEstimasi.setVisible(false);
            updateOriginalEstimation(); // Kembalikan ke estimasi awal
        }
        private void updateEstimationDate() {
            try {
        // Ambil nilai hari tanpa menghapus slash
                String currentText = Tf_Estimasi.getText();

                // Jika field berisi format lengkap (dd/MM/yyyy), parse dulu
                if (currentText.matches("\\d{2}/\\d{2}/\\d{4}")) {
                    SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
                    Date currentDate = sdf.parse(currentText);

                    // Kembalikan dalam format yang sama
                    Tf_Estimasi.setText(sdf.format(currentDate));
                    return;
                }

                // Jika hanya berisi angka (hari tambahan)
                String input = currentText.replaceAll("[^0-9]", "");
                if (input.isEmpty()) {
                    JOptionPane.showMessageDialog(this, 
                        "Harap masukkan jumlah hari tambahan", 
                        "Input Kosong", 
                        JOptionPane.WARNING_MESSAGE);
                    Tf_Estimasi.setText("0");
                    return;
                }
                 int daysToAdd;
        try {
            daysToAdd = Integer.parseInt(input);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, 
                "Harap masukkan angka yang valid", 
                "Input Tidak Valid", 
                JOptionPane.ERROR_MESSAGE);
            Tf_Estimasi.setText("0");
            return;
        }

                SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
                Date originalDate = sdf.parse(this.originalEstimation);

                Calendar cal = Calendar.getInstance();
                cal.setTime(originalDate);
                cal.add(Calendar.DAY_OF_MONTH, daysToAdd);

                // Format dengan slash
                Tf_Estimasi.setText(sdf.format(cal.getTime()));

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, 
                    "Terjadi kesalahan saat memproses tanggal: " + ex.getMessage(), 
                    "Error", 
                    JOptionPane.ERROR_MESSAGE);
                Tf_Estimasi.setText(this.originalEstimation);
            }
      }
    private boolean isValidDateInput(String text) {
        return text.matches("^\\d{0,2}(/?\\d{0,2}(/?\\d{0,4})?)?$");
    }
        
    public void setCatatan(String Catatan) {
        Tf_Catatan.setText(Catatan);
    }
    
    public void setStatus(String statusDatabase) {
        Jc_Status.removeAllItems();
    
        for (StatusPemesanan status : StatusPemesanan.values()) {
            Jc_Status.addItem(status.toString());
        }

        // Set nilai sesuai database
        if (statusDatabase != null) {
            for (int i = 0; i < Jc_Status.getItemCount(); i++) {
                if (Jc_Status.getItemAt(i).equals(statusDatabase)) {
                    Jc_Status.setSelectedIndex(i);
                    break;
                }
            }
        } else {
            Jc_Status.setSelectedIndex(0); // Default jika tidak ada data
        }
    }
    
    public void setTotal(String totalFromDB) {
        try {
        // Langsung parse nilai dengan titik desimal
        double nilai = Double.parseDouble(totalFromDB);
        Tf_Total.setText(formatRupiah(nilai));
    } catch (NumberFormatException e) {
        // Fallback untuk handle format tak terduga
        try {
            String cleanValue = totalFromDB.replaceAll("[^\\d.]", "");
            double nilai = Double.parseDouble(cleanValue);
            Tf_Total.setText(formatRupiah(nilai));
        } catch (NumberFormatException ex) {
            Tf_Total.setText("Rp 0,00");
            System.err.println("Format total tidak valid: " + totalFromDB);
        }
    }
    }
    public enum StatusPemesanan {
    PERLU_PENGULANGAN("Perlu Pengulangan"),
    SEDANG_DIPROSES("Sedang Diproses"),
    SELESAI("Selesai");

    private final String displayName;

    StatusPemesanan(String displayName) {
        this.displayName = displayName;
    }

    @Override
    public String toString() {
        return displayName;
    }
}
    private void setupCatatanField() {
    // 1. Setup document filter (sama dengan AddOrder)
    ((AbstractDocument)Tf_Catatan.getDocument()).setDocumentFilter(new NoteLength(300));
    
    // 2. Setup counter (opsional, untuk konsistensi UI)
    addCharacterCounter();
    
    
    Tf_Catatan.setLineWrap(true);
    Tf_Catatan.setWrapStyleWord(true);
}
private void addCharacterCounter() {
    JLabel counterLabel = new JLabel("0/300");
    counterLabel.setFont(new Font("Tahoma", Font.PLAIN, 10));
    
    
    Tf_Catatan.getDocument().addDocumentListener(new DocumentListener() {
        public void update() {
            int count = Tf_Catatan.getText().length();
            counterLabel.setText(count + "/300");
            counterLabel.setForeground(count >= 300 ? Color.RED : Color.GRAY);
        }
        @Override public void insertUpdate(DocumentEvent e) { update(); }
        @Override public void removeUpdate(DocumentEvent e) { update(); }
        @Override public void changedUpdate(DocumentEvent e) { update(); }
    });
    
    getContentPane().add(counterLabel, BorderLayout.SOUTH);
}
private String formatRupiah(double nilai) {
    // Buat custom format dengan spasi setelah Rp
    DecimalFormatSymbols symbols = new DecimalFormatSymbols(new Locale("id", "ID"));
    symbols.setCurrencySymbol("Rp ");
    DecimalFormat formatter = new DecimalFormat("¤#,##0.00", symbols);
    formatter.setMinimumFractionDigits(2);
    formatter.setMaximumFractionDigits(2);
    return formatter.format(nilai);
}

class NumericFilter extends DocumentFilter {
     @Override
    public void replace(FilterBypass fb, int offset, int length, String text, AttributeSet attrs) 
            throws BadLocationException {
        text = text.replaceAll("[^0-9.]", ""); // Izinkan angka dan titik
        super.replace(fb, offset, length, text, attrs);
    }
}
private String formatTanggal(String tanggalDb) {
    try {
        SimpleDateFormat dbFormat = new SimpleDateFormat("yyyy-MM-dd");
        SimpleDateFormat displayFormat = new SimpleDateFormat("dd/MM/yyyy");
        Date date = dbFormat.parse(tanggalDb);
        return displayFormat.format(date);
    } catch (ParseException e) {
        System.err.println("Format tanggal tidak valid: " + tanggalDb);
        return "Tanggal Invalid";
    }
}
private String formatDisplayToDb(String displayDate) throws ParseException {
    if (displayDate == null || displayDate.trim().isEmpty()) {
        throw new ParseException("Date string is empty", 0);
    }
    String cleanedDate = displayDate.trim().replaceAll("[^0-9/]", "");
    try {
        SimpleDateFormat displayFormat = new SimpleDateFormat("dd/MM/yyyy");
        displayFormat.setLenient(false); 
        
        
        // Validasi tambahan
        SimpleDateFormat dbFormat = new SimpleDateFormat("yyyy-MM-dd");
        Date date = displayFormat.parse(cleanedDate);
        return dbFormat.format(date);
    } catch (ParseException e) {
        System.err.println("Failed to parse date: " + displayDate);
        throw new ParseException("Invalid date format. Use DD/MM/YYYY", e.getErrorOffset());
    }
}
private boolean updateData() throws SQLException, ParseException{
 Connection conn = ConnectorH.getConnection();
    try {
        // 1. Ambil semua nilai dari form
        String status = (String) Jc_Status.getSelectedItem();
        String catatan = Tf_Catatan.getText().trim();
        String estimasiDisplay = Tf_Estimasi.getText().trim();
        
        // 2. Konversi format tanggal jika diperlukan
        String estimasiDB;
        if (status.equals("Perlu Pengulangan")) {
            estimasiDB = formatDisplayToDb(estimasiDisplay); // Konversi dd/MM/yyyy → yyyy-MM-dd
        } else {
            estimasiDB = formatDisplayToDb(originalEstimation); // Gunakan original
        }

        // 3. Siapkan query update
        String query;
        if (estimasiDisplay.equals(originalEstimation)) {
            // Case 1: Tidak ada perubahan estimasi
            query = "UPDATE pesanan SET status_pemesanan = ?, catatan_pelanggan = ? WHERE id_transaksi = ?";
            try (PreparedStatement stmt = conn.prepareStatement(query)) {
                stmt.setString(1, status);
                stmt.setString(2, catatan);
                stmt.setInt(3, currentOrderId); // ID order yang sedang diedit
                stmt.executeUpdate();
            }
        } else {
            // Case 2: Estimasi berubah
            query = "UPDATE pesanan SET status_pemesanan = ?, catatan_pelanggan = ?, tanggal_selesai = ? WHERE id_transaksi = ?";
            try (PreparedStatement stmt = conn.prepareStatement(query)) {
                stmt.setString(1, status);
                stmt.setString(2, catatan);
                stmt.setString(3, estimasiDB);
                stmt.setInt(4, currentOrderId);
                stmt.executeUpdate();
            }
            
            // Update original estimation untuk konsistensi
            this.originalEstimation = estimasiDisplay;
        }
        if (listener != null) {
                listener.onOrderUpdated(currentOrderId);
            }
        // 4. Beri feedback ke user
        JOptionPane.showMessageDialog(this, 
            "Data pesanan berhasil diperbarui", 
            "Sukses", 
            JOptionPane.INFORMATION_MESSAGE);
        
        this.dispose(); // Tutup dialog setelah update

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, 
            "Error update database: " + e.getMessage(), 
            "Database Error", 
            JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    } catch (ParseException e) {
        JOptionPane.showMessageDialog(this, 
            "Format tanggal tidak valid", 
            "Error", 
            JOptionPane.ERROR_MESSAGE);
    }
        return false;
}
private boolean validateInput() {
    // 1. Validasi status
    if (Jc_Status.getSelectedItem() == null) {
        JOptionPane.showMessageDialog(this, 
            "Pilih status pemesanan terlebih dahulu",
            "Validasi Error",
            JOptionPane.WARNING_MESSAGE);
        return false;
    }

    // 2. Validasi estimasi jika status "Perlu Pengulangan"
    if ("Perlu Pengulangan".equals(Jc_Status.getSelectedItem())) {
        if (!Tf_Estimasi.getText().matches("\\d{2}/\\d{2}/\\d{4}")) {
            JOptionPane.showMessageDialog(this, 
                "Format tanggal harus DD/MM/YYYY",
                "Format Tanggal Salah",
                JOptionPane.ERROR_MESSAGE);
            Tf_Estimasi.requestFocus();
            return false;
        }
    }

    // 3. Validasi catatan (opsional)
    if (Tf_Catatan.getText().length() > 300) {
        JOptionPane.showMessageDialog(this, 
            "Catatan maksimal 300 karakter",
            "Validasi Error",
            JOptionPane.WARNING_MESSAGE);
        return false;
    }

    return true;
}    
}
